#version 450 core
layout(push_constant) uniform UniformBufferObject {
    mat4 view;
    mat4 proj;
} ubo;

layout(set=0, binding = 0) uniform Light { 
	vec4 position;
	vec4 color;
	float intensity;
} light;

layout(set=1, binding = 0) uniform Model {
  mat4 pos;
} model;

layout(set=3, binding = 0) uniform LightView {
  mat4 transform;
} lightView;

layout(location = 0) in vec3 inPosition;
layout(location = 1) in vec3 inColor;
layout(location = 2) in vec2 inTexCoord;
layout(location = 3) in vec3 inNormal;

//layout(location = 4) in vec3 inTangent;
//layout(location = 5) in vec3 inBitangent;

layout(location = 0) out vec3	worldSpaceNormal; 
layout(location = 1) out vec3	worldSpacePosition; 
layout(location = 2) out vec2 fragTexCoord;
layout(location = 3) out mat4 viewMatrix;

//layout(location = 7) out vec3 tangentLightPos;
//layout(location = 8) out vec3 tangentViewPos;
//layout(location = 9) out vec3 tangentFragPos;

void main()
{
    //worldSpaceNormal = inverse(transpose(mat3(model.pos))) * inNormal;
    worldSpaceNormal = mat3(model.pos) * inNormal;
    worldSpacePosition = (model.pos * vec4(inPosition, 1.0)).xyz;
    viewMatrix = ubo.view;
    fragTexCoord = inTexCoord;

//    vec3 T = normalize(vec3(model.pos * vec4(inTangent,   0.0)));
//    vec3 B = normalize(vec3(model.pos * vec4(inBitangent, 0.0)));
//    vec3 N = normalize(vec3(model.pos * vec4(inNormal,    0.0)));
//    mat3 TBN = mat3(T, B, N);
//    tangentLightPos = TBN * light.position.xyz;
//    tangentViewPos  = TBN * (inverse(viewMatrix) * vec4(vec3(0.0),1.0)).xyz;
//    tangentFragPos  = TBN * worldSpacePosition;
    

    gl_Position = ubo.proj * ubo.view * model.pos * vec4(inPosition, 1.0);

}